package com.example.controllers;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.entities.InvoiceHeader;
import com.example.entities.InvoiceWrapper;
import com.example.services.InvoiceHeaderService;
import com.example.entities.InvoiceDetail;

@RestController
@RequestMapping("/invoices")
public class InvoiceHeaderController {
    @Autowired
    private InvoiceHeaderService invoiceHeaderService;

    @GetMapping
    public List<InvoiceHeader> getAllInvoices() {
        return invoiceHeaderService.getAllInvoices();
    }

    @PostMapping
    public InvoiceHeader createInvoice(@RequestBody InvoiceHeader invoiceHeader) {
        return invoiceHeaderService.createInvoice(invoiceHeader);
    }

    @PostMapping("/create")
    public ResponseEntity<InvoiceHeader> createInvoice(@RequestBody InvoiceWrapper wrapper) {
        InvoiceHeader header = wrapper.getInvoiceHeader();
        List<InvoiceDetail> details = wrapper.getInvoiceDetails();

        InvoiceHeader createdInvoice = invoiceHeaderService.createInvoice(header, details);
        return ResponseEntity.ok(createdInvoice);
    }

    @GetMapping("/{id}")
    public ResponseEntity<InvoiceHeader> getInvoice(@PathVariable int id) {
        return invoiceHeaderService.getInvoiceById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    
    @PostMapping("/create")
    public InvoiceHeader createInvoice(@RequestBody Map<String, Object> data) {
        // Extract fields from map
        Integer userId = (Integer) data.get("userId");
        Integer modelId = (Integer) data.get("modelId");
        Integer quantity = (Integer) data.get("quantity");

        // Fetch user entity
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        // Fetch model entity
        Model model = modelRepository.findById(modelId)
                .orElseThrow(() -> new RuntimeException("Model not found"));

        // Create and populate InvoiceHeader entity
        InvoiceHeader invoiceHeader = new InvoiceHeader();
        invoiceHeader.setCustName(user.getName()); // or appropriate getter
        invoiceHeader.setModel(model);
        invoiceHeader.setQuantity(quantity);
        invoiceHeader.setInvoiceDate(LocalDateTime.now());

        InvoiceHeader savedHeader = invoiceHeaderRepository.save(invoiceHeader);

        // Extract components list
        List<Map<String, Object>> components = (List<Map<String, Object>>) data.get("components");

        for (Map<String, Object> compMap : components) {
            Integer compId = (Integer) compMap.get("compId");
            Integer compQty = (Integer) compMap.get("quantity");
            Number priceNum = (Number) compMap.get("price");  // JSON numbers map to Number class
            BigDecimal price = new BigDecimal(priceNum.toString());

            Component component = componentRepository.findById(compId)
                    .orElseThrow(() -> new RuntimeException("Component not found"));

            InvoiceDetail detail = new InvoiceDetail();
            detail.setInvoice(savedHeader);
            detail.setComponent(component);
            detail.setQuantity(compQty);
            detail.setPrice(price);

            invoiceDetailRepository.save(detail);
        }

        return savedHeader;
    }
    
}
