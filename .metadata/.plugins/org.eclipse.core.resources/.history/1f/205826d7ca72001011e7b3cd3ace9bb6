package com.example.services;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.entities.Component;
import com.example.entities.InvoiceDetail;
import com.example.entities.InvoiceHeader;
import com.example.repositories.ComponentRepository;
import com.example.repositories.InvoiceDetailRepository;
import com.example.repositories.InvoiceHeaderRepository;
import com.example.repositories.ModelRepository;

import com.example.entities.Model;
import jakarta.transaction.Transactional;

@Service
public class InvoiceHeaderService {
	 @Autowired
	    private InvoiceHeaderRepository invoiceHeaderRepo;

	    @Autowired
	    private InvoiceDetailRepository invoiceDetailRepo;

	    @Autowired
	    private ModelRepository modelRepo;

	    @Autowired
	    private ComponentRepository componentRepo;

    public List<InvoiceHeader> getAllInvoices() {
        return invoiceHeaderRepo.findAll();
    }

    public InvoiceHeader createInvoice(InvoiceHeader invoice) {
        return invoiceHeaderRepo.save(invoice);
    }

    @Transactional
    public InvoiceHeader createInvoice(InvoiceHeader header, List<InvoiceDetail> details) {
        // Save header first
        InvoiceHeader savedHeader = invoiceHeaderRepo.save(header);

        // Save each detail with reference to the saved header
        for (InvoiceDetail detail : details) {
            detail.setInvoice(savedHeader);
            invoiceDetailRepo.save(detail);
        }

        return savedHeader;
    }

    public Optional<InvoiceHeader> getInvoiceById(int invId) {
        return invoiceHeaderRepo.findById(invId);
    }
    @Transactional
    public InvoiceHeader createInvoice(Map<String, Object> invoiceData) {
        // Extract main fields
        Integer modelId = (Integer) invoiceData.get("modelId");
        Integer quantity = (Integer) invoiceData.get("quantity");
        String custDetails = (String) invoiceData.get("custDetails"); // frontend must send complete customer details as string

        // Fetch Model entity
        com.example.entities.Model model = modelRepo.findByModelId(modelId)
        	    .orElseThrow(() -> new RuntimeException("Model not found with id: " + modelId));
        // Create InvoiceHeader entity
        InvoiceHeader invoiceHeader = new InvoiceHeader();
        invoiceHeader.setModel(model);
        invoiceHeader.setQuantity(quantity);
        invoiceHeader.setCustDetails(custDetails);

        invoiceHeader.setInvDate(LocalDateTime.now());

        // Calculate or set totalAmount, tax, finalAmount (for demo, set 0)
        invoiceHeader.setTotalAmount(BigDecimal.ZERO);
        invoiceHeader.setTax(BigDecimal.ZERO);
        invoiceHeader.setFinalAmount(BigDecimal.ZERO);

        // Save InvoiceHeader first to get ID
        InvoiceHeader savedHeader = invoiceHeaderRepo.save(invoiceHeader);

        // Process details list
        List<Map<String, Object>> details = (List<Map<String, Object>>) invoiceData.get("details");

        if (details != null) {
            for (Map<String, Object> detailMap : details) {
                Integer compId = (Integer) detailMap.get("compId");
                String isAlternate = (String) detailMap.get("isAlternate");

                Component component = componentRepo.findById(compId)
                    .orElseThrow(() -> new RuntimeException("Component not found with id: " + compId));

                InvoiceDetail invoiceDetail = new InvoiceDetail();
                invoiceDetail.setInvoice(savedHeader);
                invoiceDetail.setComponent(component);
                invoiceDetail.setIsAlternate(isAlternate != null ? isAlternate : "N");

                invoiceDetailRepo.save(invoiceDetail);
            }
        }

        return savedHeader;
    }
}
