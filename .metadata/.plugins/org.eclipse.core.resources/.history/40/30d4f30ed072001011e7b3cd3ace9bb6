package com.example.services;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.entities.Component;
import com.example.entities.InvoiceDetail;
import com.example.entities.InvoiceHeader;
import com.example.entities.InvoiceWrapper;
import com.example.repositories.ComponentRepository;
import com.example.repositories.InvoiceDetailRepository;
import com.example.repositories.InvoiceHeaderRepository;
import jakarta.transaction.Transactional;

@Service
public class InvoiceHeaderService {

    @Autowired
    private InvoiceHeaderRepository invoiceHeaderRepo;

    @Autowired
    private InvoiceDetailRepository invoiceDetailRepo;

    @Autowired
    private ComponentRepository componentRepo;

    public List<InvoiceHeader> getAllInvoices() {
        return invoiceHeaderRepo.findAll();
    }

    public Optional<InvoiceHeader> getInvoiceById(int invId) {
        return invoiceHeaderRepo.findById(invId);
    }

    public InvoiceHeader createInvoice(InvoiceHeader invoice) {
        return invoiceHeaderRepo.save(invoice);
    }

    @Transactional
    public InvoiceHeader createInvoice(InvoiceWrapper wrapper) {
        InvoiceHeader header = wrapper.getInvoiceHeader();
        header.setInvDate(LocalDateTime.now());
        header.setTotalAmount(BigDecimal.ZERO);
        header.setTax(BigDecimal.ZERO);
        header.setFinalAmount(BigDecimal.ZERO);

        InvoiceHeader savedHeader = invoiceHeaderRepo.save(header);

        for (InvoiceDetail detail : wrapper.getInvoiceDetails()) {
            Integer compId = detail.getComponent().getCompId();
            Component component = componentRepo.findById(compId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid component ID: " + compId));

            detail.setInvoice(savedHeader);
            detail.setComponent(component);

            invoiceDetailRepo.save(detail);
        }

        return savedHeader;
    }
}
