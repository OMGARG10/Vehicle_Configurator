package com.example.services;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.entities.AlternateComponent;
import com.example.entities.Component;
import com.example.entities.InvoiceDetail;
import com.example.entities.InvoiceHeader;
import com.example.entities.InvoiceWrapper;
import com.example.entities.Model;
import com.example.entities.User;
import com.example.entities.VehicleDetail;
import com.example.repositories.AlternateComponentRepository;
import com.example.repositories.ComponentRepository;
import com.example.repositories.InvoiceDetailRepository;
import com.example.repositories.InvoiceHeaderRepository;
import com.example.repositories.ModelRepository;
import com.example.repositories.UserRepository;
import com.example.repositories.VehicleDetailRepository;

import jakarta.transaction.Transactional;

@Service
public class InvoiceHeaderService {

    @Autowired
    private InvoiceHeaderRepository invoiceHeaderRepo;

    @Autowired
    private InvoiceDetailRepository invoiceDetailRepo;

    @Autowired
    private AlternateComponentRepository alternateComponentRepo;
    
    @Autowired
    private ModelRepository modelRepo;
    
    @Autowired
    private UserRepository userRepo;
    
    @Autowired
    private VehicleDetailRepository vehicleDetailRepos;

    public List<InvoiceHeader> getAllInvoices() {
        return invoiceHeaderRepo.findAll();
    }

    public Optional<InvoiceHeader> getInvoiceById(int invId) {
        return invoiceHeaderRepo.findById(invId);
    }

    public InvoiceHeader createInvoice(InvoiceHeader invoice) {
        return invoiceHeaderRepo.save(invoice);
    }

    public InvoiceHeader createInvoice(InvoiceWrapper wrapper) {
        InvoiceHeader header = new InvoiceHeader();

        // Fetch model and user from DB
        Model model = modelRepo.findById(wrapper.getModelId())
            .orElseThrow(() -> new RuntimeException("Model not found"));

        User user = userRepo.findById(wrapper.getUserId())
            .orElseThrow(() -> new RuntimeException("User not found"));

        // Set basic info
        header.setUser(user);
        header.setModel(model);
        header.setQuantity(wrapper.getQuantity());

        // Calculate base price
        BigDecimal baseAmount = model.getPrice().multiply(BigDecimal.valueOf(wrapper.getQuantity()));
        BigDecimal altAmount = BigDecimal.ZERO;

        List<InvoiceDetail> details = new ArrayList<>();

        // ✅ Process alternate components
        for (Integer altCompId : wrapper.getAlternateComponentIds()) {
            AlternateComponent altComp = alternateComponentRepo.findByAlternateComponentCompIdAndModelModelId(altCompId, model.getModelId())
                .orElseThrow(() -> new RuntimeException("Alternate Component not found for modelId: " + model.getModelId() + " and compId: " + altCompId));

            altAmount = altAmount.add(altComp.getDeltaPrice());

            InvoiceDetail detail = new InvoiceDetail();
            detail.setInvoiceHeader(header);
            detail.setComponent(altComp.getAlternateComponent());  // set the actual alternate component
            detail.setIsAlternate("Y");
            details.add(detail);
        }

        // ✅ Add default non-configurable components
        List<VehicleDetail> defaultComps = vehicleDetailRepos
            .findByModel_ModelIdAndIsConfigurable(model.getModelId(), 'N');

        for (VehicleDetail vd : defaultComps) {
            InvoiceDetail detail = new InvoiceDetail();
            detail.setInvoiceHeader(header);
            detail.setComponent(vd.getComponent());
            detail.setIsAlternate("N");
            details.add(detail);
        }

        // ✅ Calculate final amount
        BigDecimal finalAmt = baseAmount.add(altAmount);
        BigDecimal tax = finalAmt.multiply(BigDecimal.valueOf(0.18)).setScale(2, RoundingMode.HALF_UP);
        BigDecimal total = finalAmt.add(tax);

        header.setFinalAmount(finalAmt);
        header.setTax(tax);
        header.setTotalAmount(total);
        header.setInvDate(LocalDateTime.now());

        // ✅ Save header and details
        header = invoiceHeaderRepo.save(header);
        invoiceDetailRepo.saveAll(details);

        return header;
    }



}
