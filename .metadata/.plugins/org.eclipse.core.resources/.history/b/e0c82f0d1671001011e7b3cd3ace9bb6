package com.example.services;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.entities.Manufacturer;
import com.example.entities.Model;
import com.example.entities.Segment;
import com.example.entities.VehicleDetail;
import com.example.repositories.ModelRepository;
import com.example.repositories.VehicleDetailRepository;

import jakarta.persistence.EntityNotFoundException;

@Service
public class ModelService {
	
    @Autowired
    private ModelRepository modelRepository;
    
    @AutoWired
    public ModelService(ModelRepository modelRepository) {
        this.modelRepository = modelRepository;
    }
    
    private VehicleDetailRepository vehicleDetailRepository;

    public ModelService(ModelRepository modelRepository, VehicleDetailRepository vehicleDetailRepository) {
        this.modelRepository = modelRepository;
        this.vehicleDetailRepository = vehicleDetailRepository;
    }

    public List<Model> getAllModels() {
        return modelRepository.findAll();
    }

    public Model createModel(Model model) {
        return modelRepository.save(model);
    }
    
    public List<Model> getModelsBySegment(Segment segment) {
        return modelRepository.findBySegment(segment);
    }
    
    public List<Model> getModelsByManufacturerAndSegment(Manufacturer manufacturer, Segment segment) {
        return modelRepository.findByManufacturerAndSegment(manufacturer, segment);
    }
    
    public Model getFullModelDetails(int modelId) {
        return modelRepository.findByModelId(modelId);
    }
    
    public Model getModelWithDefaultConfig(int modelId) {
        Model model = modelRepository.findById(modelId)
                .orElseThrow(() -> new EntityNotFoundException("Model not found"));

        // Get default components (isConfigurable = 'N')
        List<VehicleDetail> defaultComponents = vehicleDetailRepository.findByModel_ModelIdAndIsConfigurable(modelId, 'N');
        model.setDefaultComponents(defaultComponents);

        return model;
    }

}


