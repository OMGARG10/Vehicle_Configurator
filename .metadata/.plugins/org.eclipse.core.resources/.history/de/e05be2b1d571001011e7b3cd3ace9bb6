package com.example.services;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.entities.AlternateComponent;
import com.example.entities.VehicleDetail;
import com.example.repositories.AlternateComponentRepository;
import com.example.repositories.VehicleDetailRepository;

@Service
public class AlternateComponentService {
    @Autowired
    private AlternateComponentRepository altCompRepository;
    
    @Autowired
    private VehicleDetailRepository vehicleDetailRepository;

    public List<AlternateComponent> getAllAlternateComponents() {
        return altCompRepository.findAll();
    }
    
    public List<AlternateComponent> getAlternatesByComponentId(Integer compId) {
        return altCompRepository.findByBaseComponentCompId(compId);
    }
    
    public Map<String, Map<Integer, List<AlternateComponent>>> getGroupedAlternatesByModel(Integer modelId) {
        List<VehicleDetail> configurableComponents = vehicleDetailRepository
                .findByModelModelIdAndIsConfigurable(modelId, "Y");

        // Group components by type (C, I, E)
        Map<String, List<Integer>> groupedCompIds = configurableComponents.stream()
                .collect(Collectors.groupingBy(
                        VehicleDetail::getCompType,
                        Collectors.mapping(vd -> vd.getComponent().getCompId(), Collectors.toList())
                ));

        Map<String, Map<Integer, List<AlternateComponent>>> result = new HashMap<>();

        for (Map.Entry<String, List<Integer>> entry : groupedCompIds.entrySet()) {
            String type = entry.getKey(); // C / I / E
            Map<Integer, List<AlternateComponent>> altMap = new HashMap<>();

            for (Integer compId : entry.getValue()) {
                List<AlternateComponent> alternates = altCompRepository.findByBaseComponentCompId(compId);
                altMap.put(compId, alternates);
            }

            result.put(type, altMap);
        }

        return result;
    }
 

    public AlternateComponent addAlternateComponent(AlternateComponent altComp) {
        return altCompRepository.save(altComp);
    }
    
}